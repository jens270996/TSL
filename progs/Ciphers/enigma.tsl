involution enigma (Configuration.Letter)
    (RotorNos.(Rotations.Plugboard)) <-Configuration
    // Plugboard
    (Plugboard.Letter) <- involute plugboard (Plugboard.Letter)
    // Rotors
    (RotorNos.(R1.(R2.R3))) <- call getRotors RotorNos
    (O1.(O2.O3)) <- Rotations
    (Letter.(R1.O1)) <- call applyRotor (Letter.(R1.O1))
    (Letter.(R2.O2)) <- call applyRotor (Letter.(R2.O2))
    (Letter.(R3.O3)) <- call applyRotor (Letter.(R3.O3))
    // Reflector
    Letter <- involute reflector Letter


involution plugboard (Plugboard.Letter)
    if Plugboard = 'nil
    then skip
    else (Plugboard.Letter) <- involute plugboardRec (Plugboard.Letter)
    fi Plugboard = 'nil

involution plugboardRec (Plugboard.Letter)
    ((A.B).Plugboard) <- Plugboard
    if A = Letter || B = Letter
    then ((A.B).Letter) <- involute plug ((A.B).Letter)
    else (Plugboard.Letter) <- involute plugboard (Plugboard.Letter)
    fi A = Letter || B = Letter

involution plug ((A.B).Letter)
    if Letter = A
    then Letter ^= A
         Letter ^= B
         (A.B) <- (B.A)
    else skip
    fi Letter = A
    (A.B) <- (B.A)

procedure applyRotor (Letter.(Rotor.Offset))
    (Letter.Offset) <- call applyCyclicPermutation (Letter.Offset)
    (Letter.Rotor) <- call rotor (Letter.Rotor)
    (Letter.Offset) <- uncall applyCyclicPermutation (Letter.Offset)
    return (Letter.(Rotor.Offset))

// Applies cyclic permutation on alphabet N times.
procedure applyCyclicPermutation (Letter.N)
    Letter += N
    if Letter >= '26
    then Letter -='26
    else skip
    fi Letter < N
    return (Letter.N)

procedure rotor (Letter.Rotor)
    if Rotor = 'nil
    then skip
    else ((Letter'.Letter'').Rotor) <- Rotor
        if Letter = Letter'
        then Letter ^= Letter'
             Letter ^= Letter''
        else (Letter.Rotor) <- call rotor (Letter.Rotor)
        fi Letter = Letter''
        Rotor <- ((Letter'.Letter'').Rotor)
    fi Rotor = 'nil
    return (Letter.Rotor)

procedure getRotors RotorNos
    (R1.(R2.R3)) <- RotorNos
    (R1.Rotor1) <- call getRotor R1
    (R2.Rotor2) <- call getRotor R2
    (R3.Rotor3) <- call getRotor R3
    RotorNos <- (R1.(R2.R3))
    Rotors <- (Rotor1.(Rotor2.Rotor3))
    return (RotorNos.Rotors)

procedure getRotor RotorNo
    if RotorNo = '1 then
        Rotor <- involute rotor1 Rotor
    else if RotorNo = '2 then
        Rotor <- involute rotor2 Rotor
    else if RotorNo = '3 then
        Rotor <- involute rotor3 Rotor
    else if RotorNo = '4 then
        Rotor <- involute rotor4 Rotor
    else if RotorNo = '5 then
        Rotor <- involute rotor5 Rotor
    else skip // should not reach
    fi RotorNo = '5
    fi RotorNo = '4
    fi RotorNo = '3
    fi RotorNo = '2
    fi RotorNo = '1
    return (RotorNo.Rotor)


// EKMFLGDQVZNTOWYHXUSPAIBRCJ
involution rotor1 X
    X ^= '((0.4).
    ((1.10).
    ((2.12).
    ((3.5).
    ((4.11).
    ((5.6).
    ((6.3).
    ((7.16).
    ((8.21).
    ((9.25).
    ((10.13).
    ((11.19).
    ((12.14).
    ((13.22).
    ((14.24).
    ((15.7).
    ((16.23).
    ((17.20).
    ((18.18).
    ((19.15).
    ((20.0).
    ((21.8).
    ((22.1).
    ((23.17).
    ((24.2).
    ((25.9).nil))))))))))))))))))))))))))


// AJDKSIRUXBLHWTMCQGZNPYFVOE
involution rotor2 X
    X ^='((0.0).
        ((1.9).
        ((2.3).
        ((3.10).
        ((4.18).
        ((5.9).
        ((6.17).
        ((7.20).
        ((8.23).
        ((9.1).
        ((10.11).
        ((11.7).
        ((12.22).
        ((13.19).
        ((14.12).
        ((15.2).
        ((16.16).
        ((17.6).
        ((18.25).
        ((19.13).
        ((20.15).
        ((21.24).
        ((22.5).
        ((23.21).
        ((24.14).
        ((25.4).nil)))))))))))))))))))))))))) 

//BDFHJLCPRTXVZNYEIWGAKMUSQO
involution rotor3 X
    X ^=
    '((0.1).
    ((1.3).
    ((2.5).
    ((3.7).
    ((4.9).
    ((5.11).
    ((6.2).
    ((7.15).
    ((8.17).
    ((9.19).
    ((10.23).
    ((11.21).
    ((12.25).
    ((13.13).
    ((14.24).
    ((15.4).
    ((16.8).
    ((17.22).
    ((18.6).
    ((19.0).
    ((20.10).
    ((21.12).
    ((22.20).
    ((23.18).
    ((24.16).
    ((25.14).nil)))))))))))))))))))))))))) 

// ESOVPZJAYQUIRHXLNFTGKDCMWB
involution rotor4 X
    X ^=
    '((0.4).
    ((1.18).
    ((2.14).
    ((3.21).
    ((4.15).
    ((5.25).
    ((6.9).
    ((7.0).
    ((8.24).
    ((9.16).
    ((10.20).
    ((11.8).
    ((12.17).
    ((13.7).
    ((14.23).
    ((15.11).
    ((16.13).
    ((17.5).
    ((18.19).
    ((19.6).
    ((20.10).
    ((21.3).
    ((22.2).
    ((23.12).
    ((24.22).
    ((25.1).nil)))))))))))))))))))))))))) 

//VZBRGITYUPSDNHLXAWMJQOFECK
involution rotor5 X
    X ^=
    '((0.21).
    ((1.25).
    ((2.1).
    ((3.17).
    ((4.6).
    ((5.8).
    ((6.19).
    ((7.24).
    ((8.20).
    ((9.15).
    ((10.18).
    ((11.3).
    ((12.13).
    ((13.7).
    ((14.11).
    ((15.23).
    ((16.0).
    ((17.22).
    ((18.12).
    ((19.9).
    ((20.16).
    ((21.14).
    ((22.5).
    ((23.4).
    ((24.2).
    ((25.10).nil)))))))))))))))))))))))))) 


//UKW-B
//YRUHQSLDPXNGOKMIEBFZCWVJAT
// 0  1   2 3  4  5  6 7  8  9 10 11 12 13 14 15 16 17 18 19 20 21  22 23 24  25
// 24 17 20 7 16 18 11 3 15 23 13 6  14 10 12 8   4  1  5 25  2 22  21  9  0  19 
involution reflector Letter
    Reflector ^=
    '((0.24).
     ((1.17).
     ((2.20).
     ((3.7).
     ((4.16).
     ((5.18).
     ((6.11).
     ((8.15).
     ((9.23).
     ((10.13).
     ((12.14).
     ((19.25).
     ((21.22).
     nil)))))))))))))
    (Reflector.Letter) <- involute plugboard (Reflector.Letter)