procedure elem (Map.Var)
    if Map = 'nil
    then skip
    else
        ((Var'.Val').Map) <- Map
        if Var' = Var
        then In ^= 'true
        else (In.(Map.Var)) <- call elem (Map.Var)
        fi Var' = Var
        Map <- ((Var'.Val').Map)
    fi Map = 'nil
    return (In.(Map.Var))

procedure first (Map.Var)
    if Map = 'nil
    then skip
    else
        ((Var'.Val').Map) <- Map
        if Var' = Var
        then First ^= 'true
        else skip
        fi Var' = Var
        Map <- ((Var'.Val').Map)
    fi Map = 'nil
    return (First.(Map.Var))

procedure singleton List
    (List.C) <- call countRec (List.'0)
    if C = '1
    then B ^= 'true
    else skip
    fi B = 'true
    (List.'0) <- uncall countRec (List.C)

procedure count List
    (List.C) <- call countRec (List.'0)
    return (List.C)

procedure countRec (List.C)
    if List = 'nil
    then skip
    else C+=1
         (Head.Tail) <- List
         (Tail.C) <- call countRec (Tail.C)
         List <- (Head.Tail)
    fi List = 'nil
    return (List.C)

procedure unconst List
    if List = 'nil
    then skip

