// (Start.(End.(Rules.S_right))) -> (Start.(End.(Rules.S_right)))
involution TSTM (Start.(End.(Rules.S_right)))
    S_right' ^= S_right
    (Start.(End.(Rules.S_right'))) <- call RTM (Start.(End.(Rules.S_right')))

    (S_right.S_right') <- (S_right'.S_right)



// --------------------- RTM below -----------------------------------------------------------------------------

// (Start.(End.(Rules.S_right))) -> (Start.(End.(Rules.S_right)))
procedure RTM (Start.(End.(Rules.S_right)))
    S <- 'blank
    Q ^= Start

    from Q = Start
    do skip
    loop (R.(S.(Q.Rules))) <- call takeRule (S.(Q.Rules))
         (Q.(R.(S_left.(S.S_right)))) <- call step (Q.(R.(S_left.(S.S_right))))
         (S.(Q.Rules)) <- call putRule (R.(S.(Q.Rules)))
    until Q = End

    Q ^= End
    'blank <- S

    return (Start.(End.(Rules.S_right)))

// (S.(Q.Rules)) -> (R.(S.(Q.Rules)))
procedure takeRule (S.(Q.Rules))
    ((Q1.(S1.(S2.Q2))).Rules) <- Rules // ERROR HERE!!!

    if (Q1 = Q && (S1 = 'move || S1 = S))
    then R' <- (Q1.(S1.(S2.Q2)))
            R ^= R'
    else R' <- (Q1.(S1.(S2.Q2)))
            (R.(S.(Q.Rules))) <- call takeRule (S.(Q.Rules))
    fi R = R'

    Rules <- (R'.Rules)
    return (R.(S.(Q.Rules)))


// (Q.R.(S_left.(S.S_right))) -> (Q.R.(S_left.(S.S_right)))
procedure step (Q.(R.(S_left.(S.S_right))))
    (Q1.(S1.(S2.Q2))) <- R

    Q ^= Q1
    Q ^= Q2
    if S1 = 'move
    then (S2.(S_left.(S.S_right))) <- call move (S2.(S_left.(S.S_right)))
    else S ^= S1
         S ^= S2
    fi S1 = 'move

    R <- (Q1.(S1.(S2.Q2)))
    return (Q.(R.(S_left.(S.S_right))))

// (R.(S.(Q.Rules))) -> (S.(Q.Rules))
procedure putRule (R.(S.(Q.Rules)))
    ((Q1.(S1.(S2.Q2))).Rules) <- Rules
    if Q2 = Q && (S1 = 'move || S2 = S)
    then R' <- (Q1.(S1.(S2.Q2)))
            R ^= R'
            (Q1.(S1.(S2.Q2))) <- R'

    else (S.(Q.Rules)) <- call putRule (R.(S.(Q.Rules)))
    fi Q2 = Q && (S1 = 'move || S2 = S)

    Rules <- ((Q1.(S1.(S2.Q2))).Rules)
    return (S.(Q.Rules))


procedure move (D.(S_left.(S.S_right)))
    if D = 'down
    then skip
    else if D = 'left
         then (S_left.(S.S_right)) <- call left (S_left.(S.S_right))
         else (S_left.(S.S_right)) <- uncall left (S_left.(S.S_right))
         fi D = 'left
    fi D = 'down
    return (D.(S_left.(S.S_right)))

procedure left (S_left.(S.S_right))
    if S_right = 'nil && S = 'blank
    then S ^= 'blank
    else S_right <- (S.S_right)
    fi S_right = 'nil 

    if S_left = 'nil
    then S ^= 'blank
    else (S.S_left) <- S_left
    fi S_left = 'nil && S = 'blank

    return (S_left.(S.S_right))